# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: myservice # NOTE: update this with your service name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"
frameworkVersion: ">=1.28.0 <2.0.0"

provider:
  name: aws
  runtime: go1.x

  # you can overwrite defaults here
  stage: dev
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
# iamRoleStatements:
#   - Effect: "Allow"
#     Action:
#       - "cloudwatch:*"
#    Resource: { "Fn::Join" : ["", ["arn:aws:s3:::", { "Ref" : "ServerlessDeploymentBucket" } ] ]  }
#  - Effect: "Allow"
#    Action:
#      - "s3:PutObject"
#    Resource:
#      Fn::Join:
#        - ""
#        - - "arn:aws:s3:::"
#          - "Ref" : "ServerlessDeploymentBucket"
#  - "/*"

# you can define service wide environment variables here

package:
  exclude:
    - ./**
  include:
    - ./bin/**

functions:
  graphql:
    vpc:
      securityGroupIds:
        - sg-02e861cee93b94d2a
      subnetIds:
        # - subnet-99d88be0
        # - subnet-c9740882
        # - subnet-e47f52be
        - subnet-073e82f463fce2a4c
        - subnet-0c30b6128a9d398d7
        - subnet-0e9b5194763683428
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_PORT: ${env:DB_PORT}
      DB_NAME: ${env:DB_NAME}
      DB_USER: ${env:DB_USER}
      DB_PASS: ${env:DB_PASS}
      SPOTIFY_ID: ${env:SPOTIFY_ID}
      SPOTIFY_SECRET: ${env:SPOTIFY_SECRET}
    handler: bin/graphql
    events:
      - http:
          path: graphql
          method: post
          authorizer: aws_iam
          cors: true
  admingraphql:
    vpc:
      securityGroupIds:
        - sg-02e861cee93b94d2a
      subnetIds:
        # - subnet-99d88be0
        # - subnet-c9740882
        # - subnet-e47f52be
        - subnet-073e82f463fce2a4c
        - subnet-0c30b6128a9d398d7
        - subnet-0e9b5194763683428
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_PORT: ${env:DB_PORT}
      DB_NAME: ${env:DB_NAME}
      DB_USER: ${env:DB_USER}
      DB_PASS: ${env:DB_PASS}
      SPOTIFY_ID: ${env:SPOTIFY_ID}
      SPOTIFY_SECRET: ${env:SPOTIFY_SECRET}
    handler: bin/admin_graphql
    events:
      - http:
          path: admin_graphql
          method: post
          authorizer: aws_iam
          cors: true
  postconfirm:
    vpc:
      securityGroupIds:
        - sg-02e861cee93b94d2a
      subnetIds:
        # - subnet-99d88be0
        # - subnet-c9740882
        # - subnet-e47f52be
        - subnet-073e82f463fce2a4c
        - subnet-0c30b6128a9d398d7
        - subnet-0e9b5194763683428
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_PORT: ${env:DB_PORT}
      DB_NAME: ${env:DB_NAME}
      DB_USER: ${env:DB_USER}
      DB_PASS: ${env:DB_PASS}
      SPOTIFY_ID: ${env:SPOTIFY_ID}
      SPOTIFY_SECRET: ${env:SPOTIFY_SECRET}
    handler: bin/post_confirm
  automigrate:
    vpc:
      securityGroupIds:
        - sg-02e861cee93b94d2a
      subnetIds:
        # - subnet-99d88be0
        # - subnet-c9740882
        # - subnet-e47f52be
        - subnet-073e82f463fce2a4c
        - subnet-0c30b6128a9d398d7
        - subnet-0e9b5194763683428
    environment:
      DB_HOST: ${env:DB_HOST}
      DB_PORT: ${env:DB_PORT}
      DB_NAME: ${env:DB_NAME}
      DB_USER: ${env:DB_USER}
      DB_PASS: ${env:DB_PASS}
      SPOTIFY_ID: ${env:SPOTIFY_ID}
      SPOTIFY_SECRET: ${env:SPOTIFY_SECRET}
    handler: bin/auto_migrate
#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
# events:
#    events:
#      - http:
#          path: users/create
#          method: get
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
